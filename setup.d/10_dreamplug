#!/bin/sh
#
# Only replace fstab if it is empty.  This will avoid wiping the fstab
# file when running setup inside a real installation, as opposed to
# when building a chroot.

enable_serial_console() {
    # By default, spawn a console on the serial port
    echo "Adding a getty on the serial port"
    echo "T0:12345:respawn:/sbin/getty -L ttyS0 115200 vt100" >> /etc/inittab
}

dreamplug_flash() {
    # allow flash-kernel to work without valid /proc contents
    # ** this doesn't *really* work, since there are too many checks
    #    that fail in an emulated environment!  We'll have to do it by
    #    hand below anyway...
    export FK_MACHINE="Globalscale Technologies Dreamplug"

    # Installing flash-kernel here, as installing it using debootstrap
    # causes all kernel related postinst scripts to stop working when
    # installed in a chroot.
    chroot $rootdir apt-get install -y flash-kernel
}

dreamplug_repack_kernel() {
# process installed kernel to create uImage, uInitrd, dtb
# using flash-kernel would be a good approach, except it fails in the
# cross build environment due to too many environment checks...
#FK_MACHINE="Globalscale Technologies Dreamplug" flash-kernel
#  so, let's do it manually...

# flash-kernel's hook-functions provided to mkinitramfs have the
# unfortunate side-effect of creating /conf/param.conf in the initrd
# when run from our emulated chroot environment, which means our root=
# on the kernel command line is completely ignored!  repack the initrd
# to remove this evil...

    echo "info: repacking dreamplug kernel and initrd"

    kernelVersion=$(ls /usr/lib/*/kirkwood-dreamplug.dtb | head -1 | cut -d/ -f4)
    version=$(echo $kernelVersion | sed 's/linux-image-\(.*\)/\1/')
    initRd=initrd.img-$version
    vmlinuz=vmlinuz-$version

    mkdir /tmp/initrd-repack

    (cd /tmp/initrd-repack ; \
	zcat /boot/$initRd | cpio -i ; \
	rm -f conf/param.conf ; \
	find . | cpio --quiet -o -H newc | \
	gzip -9 > /boot/$initRd )

    rm -rf /tmp/initrd-repack

    (cd /boot ; \
	cp /usr/lib/$kernelVersion/kirkwood-dreamplug.dtb dtb ; \
	cat $vmlinuz dtb >> temp-kernel ; \
	mkimage -A arm -O linux -T kernel -n "Debian kernel ${version}" \
	-C none -a 0x8000 -e 0x8000 -d temp-kernel uImage ; \
	rm -f temp-kernel ; \
	mkimage -A arm -O linux -T ramdisk -C gzip -a 0x0 -e 0x0 \
	-n "Debian ramdisk ${version}" \
	-d $initRd uInitrd )
}

# Install binary blob and kernel needed to boot on the Raspberry Pi.
raspberry_setup_boot() {
    # Packages used by rpi-update to make Raspberry Pi bootable
    apt-get install -y git-core binutils ca-certificates wget kmod

    wget https://raw.github.com/Hexxeh/rpi-update/master/rpi-update \
	-O /usr/bin/rpi-update
    chmod a+x /usr/bin/rpi-update
    mkdir -p /lib/modules
    touch /boot/start.elf
    rpi-update > /root/rpi-update.log

}
if [ ! -s /etc/fstab ] ; then
    echo "Setting up disk configuration for $DESTINATION"

    cat > /etc/fstab <<EOF
proc	  /proc		proc	none		0	0
sys	  /sys		sysfs	none		0	0
none	  /dev/pts	devpts	defaults	0	0
tmpfs     /tmp          tmpfs   rw,nosuid,nodev 0       0
EOF

    case $DESTINATION in
	card)
	    cat > /etc/fstab <<EOF
/dev/sda2 /		auto	relatime,rw	0	0
/dev/sda1 /boot  	vfat	defaults	0	0
EOF
	    ;;
	usb)
	    cat > /etc/fstab <<EOF
/dev/sdc2 /		auto	relatime,rw	0	0
/dev/sdc1 /boot  	vfat	defaults	0	0
EOF
	    ;;
    esac

    printf "" > /etc/mtab
fi

case "$MACHINE" in
    dreamplug|guruplug)
	dreamplug_flash
	dreamplug_repack_kernel
	enable_serial_console
	;;
    raspberry)
	raspberry_setup_boot
	;;
esac

# Already configured, do not overwrite existing setup
if [ "$MACHINE" ] &&
    ( [ ! -e /etc/network/interface ] || ! grep eth0 /etc/network/interface )
then
    echo "Setting up network configuration for $MACHINE"

    rm -f /etc/udev/rules.d/75-persistent-net-generator.rules

    cat > /etc/network/interfaces <<EOF
# This file describes the network interfaces available on your system
# and how to activate them. For more information, see interfaces(5).

# The loopback network interface
auto lo
iface lo inet loopback
EOF
    case "$MACHINE" in
	dreamplug|guruplug)
	    cat >> /etc/network/interfaces <<EOF

# The primary network interface
auto eth0
iface eth0 inet static
    address 192.168.1.1
    netmask 255.255.255.0

allow-hotplug eth1
iface eth1 inet dhcp

# auto uap0
# iface uap0 inet static
#     address 192.168.2.1
#     netmask 255.255.255.0
#     post-up uaputl sys_cfg_ssid "freedombox"
#     post-up uaputl sys_cfg_protocol 32  # WPA2
#     post-up uaputl sys_cfg_wpa_passphrase "freedombox123"
#     post-up uaputl sys_cfg_cipher 8 8   # AES CCMP
#     post-up uaputl bss_start
EOF
	    ;;
	virtualbox)
	    cat >> /etc/network/interfaces <<EOF

allow-hotplug eth0
iface eth0 inet dhcp
EOF
	    ;;
    esac
fi


echo "info: rewriting /etc/hosts, leave host specific info to libnss-myhostname."
cat > /etc/hosts <<EOF
# Only generic entries in /etc/hosts, host specific information is
# provided by libnss-myhostname.
127.0.0.1       localhost

# The following lines are desirable for IPv6 capable hosts
::1     localhost ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF

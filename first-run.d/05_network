#!/bin/bash

# Configure networking for device.
#
# Creates a basic network interface file and network-manager connections.
#
# First parameter is the path to the network interface file to
# configure.

if [ -n "$1" ]
then
    IFACES_FILE=$1
else
    IFACES_FILE=/etc/network/interfaces
fi

INTERFACE_DETECT="interface-detect"

function get-wired-interfaces {
    # set WIRED_IFACES to list of wired interfaces, less lo.

    WIRED_IFACES=`$INTERFACE_DETECT | grep "wired" \
        | grep "^[^l][^o]"`
}

function interfaces-eth0 {
    # create n-m connection for eth0
    nmcli con add con-name freedomboxWAN ifname eth0 type ethernet
    nmcli con modify freedomboxWAN connection.autoconnect TRUE
    nmcli con modify freedomboxWAN connection.zone internal
}

function interfaces-eth1 {
    # Create n-m connection for eth1
    nmcli con add con-name freedomboxLAN ifname eth1 type ethernet
    nmcli con modify freedomboxLAN connection.autoconnect TRUE

    # Configure this interface to be shared with other computers.
    #  - Self-assign an address and network
    #  - Start and manage DNS server (dnsmasq)
    #  - Start and manage DHCP server (dnsmasq)
    #  - Register address with mDNS
    #  - Add firewall rules for NATing from this interface
    nmcli con modify freedomboxLAN ipv4.method shared

    # If two interfaces are available, then change eth0 to be external.
    nmcli con modify freedomboxWAN connection.zone external
    nmcli con modify freedomboxLAN connection.zone internal
}

function two-wired-setup {
    interfaces-eth0
    interfaces-eth1
    echo "Two wired-interfaces setup complete."
}

function one-wired-setup {
    interfaces-eth0
    echo "One wired-interfaces setup complete."
}

function zero-wired-setup {
    echo "No wired interfaces detected.  Not configuring networking."
}

function update-null-macs {
    # if interface's mac address is all zeroes, change it to 0:0:0:X:X:X

    # iterate through all the interfaces
    for description in $WIRED_IFACES
    do
        name=`echo $description | cut -d"," -f1`
        mac=`echo $description | cut -d"," -f3`

        # if it's null, swap it out in the interface file.
        if [[ "$mac" == "00:00:00:00:00:00" ]]
        then
            # if macchanger gave us a new mac, use that.  or, generate dummy.
            if [[ `macchanger -a $name` ]]
            then
                newMac=`$INTERFACE_DETECT | grep $name | cut -d, -f3`
            else
                generate_dummy_mac
            fi

            # save new mac.
            sed -i "s/# $name: hwaddress ether .*$/hwaddress ether $newMac/" \
                $IFACES_FILE
        fi
    done
}

function generate_dummy_mac {
    # set "newMac" to a GlobalScale MAC address: F0:AD:4E:XX:XX:XX

    # generate 3 sets of 2 random hex digits.
    allSix="$(tr -dc '[:xdigit:]' < /dev/urandom | tr '[:lower:]' '[:upper:]' | head -c 6)"
    high=`echo $allSix | cut -b1,2`
    med=`echo $allSix | cut -b3,4`
    low=`echo $allSix | cut -b5,6`

    # generate three sets of 2 digits
    newMac="F0:AD:4E:$high:$med:$low"
}

echo "Setting up network configuration..."
get-wired-interfaces

# count wired interfaces
case `echo $WIRED_IFACES | wc -w` in
    "2")
        two-wired-setup
        ;;
    "1")
        one-wired-setup
        ;;
    "0")
        zero-wired-setup
esac

update-null-macs

echo "Done setting up network configuration."
